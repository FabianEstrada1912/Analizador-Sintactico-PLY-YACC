Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    DIV
    MULTI
    RESTA
    RETURN

Grammar

Rule 0     S' -> f
Rule 1     f -> FUNCTION fm
Rule 2     fm -> EJECUTABLE PARIZQUIERDO PARDERECHO bc
Rule 3     bc -> LLIZQUIERDA comp
Rule 4     comp -> if LLDERECHA
Rule 5     comp -> for LLDERECHA
Rule 6     comp -> print LLDERECHA
Rule 7     comp -> asg LLDERECHA
Rule 8     if -> IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA
Rule 9     eif -> expresion MENOR expresion
Rule 10    eif -> expresion MAYOR expresion
Rule 11    eif -> expresion MAYORIGUAL expresion
Rule 12    eif -> expresion MENORIGUAL expresion
Rule 13    eif -> expresion IGUALIGUAL expresion
Rule 14    for -> FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA
Rule 15    efor -> IT op expresion
Rule 16    op -> MENOR
Rule 17    compif -> if
Rule 18    compif -> for
Rule 19    compif -> print
Rule 20    compif -> asg
Rule 21    compif -> empty
Rule 22    print -> PRINT PARIZQUIERDO comprint PARDERECHO compif
Rule 23    comprint -> ID
Rule 24    comprint -> STRING con
Rule 25    con -> SUMA expresion
Rule 26    con -> empty
Rule 27    asg -> VAR ID IGUAL expresion PYC compif
Rule 28    expresion -> NUMBER
Rule 29    expresion -> ID
Rule 30    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 
DIV                  : 
EJECUTABLE           : 2
FOR                  : 14
FUNCTION             : 1
ID                   : 23 27 29
IF                   : 8
IGUAL                : 27
IGUALIGUAL           : 13
IT                   : 15
LLDERECHA            : 4 5 6 7 8 14
LLIZQUIERDA          : 3 8 14
MAYOR                : 10
MAYORIGUAL           : 11
MENOR                : 9 16
MENORIGUAL           : 12
MULTI                : 
NUMBER               : 28
PARDERECHO           : 2 8 14 22
PARIZQUIERDO         : 2 8 14 22
PRINT                : 22
PYC                  : 27
RESTA                : 
RETURN               : 
STRING               : 24
SUMA                 : 25
VAR                  : 27
error                : 

Nonterminals, with rules where they appear

asg                  : 7 20
bc                   : 2
comp                 : 3
compif               : 8 14 22 27
comprint             : 22
con                  : 24
efor                 : 14
eif                  : 8
empty                : 21 26
expresion            : 9 9 10 10 11 11 12 12 13 13 15 25 27
f                    : 0
fm                   : 1
for                  : 5 18
if                   : 4 17
op                   : 15
print                : 6 19

Parsing method: LALR

state 0

    (0) S' -> . f
    (1) f -> . FUNCTION fm

    FUNCTION        shift and go to state 2

    f                              shift and go to state 1

state 1

    (0) S' -> f .



state 2

    (1) f -> FUNCTION . fm
    (2) fm -> . EJECUTABLE PARIZQUIERDO PARDERECHO bc

    EJECUTABLE      shift and go to state 4

    fm                             shift and go to state 3

state 3

    (1) f -> FUNCTION fm .

    $end            reduce using rule 1 (f -> FUNCTION fm .)


state 4

    (2) fm -> EJECUTABLE . PARIZQUIERDO PARDERECHO bc

    PARIZQUIERDO    shift and go to state 5


state 5

    (2) fm -> EJECUTABLE PARIZQUIERDO . PARDERECHO bc

    PARDERECHO      shift and go to state 6


state 6

    (2) fm -> EJECUTABLE PARIZQUIERDO PARDERECHO . bc
    (3) bc -> . LLIZQUIERDA comp

    LLIZQUIERDA     shift and go to state 8

    bc                             shift and go to state 7

state 7

    (2) fm -> EJECUTABLE PARIZQUIERDO PARDERECHO bc .

    $end            reduce using rule 2 (fm -> EJECUTABLE PARIZQUIERDO PARDERECHO bc .)


state 8

    (3) bc -> LLIZQUIERDA . comp
    (4) comp -> . if LLDERECHA
    (5) comp -> . for LLDERECHA
    (6) comp -> . print LLDERECHA
    (7) comp -> . asg LLDERECHA
    (8) if -> . IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA
    (14) for -> . FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA
    (22) print -> . PRINT PARIZQUIERDO comprint PARDERECHO compif
    (27) asg -> . VAR ID IGUAL expresion PYC compif

    IF              shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    VAR             shift and go to state 17

    comp                           shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    print                          shift and go to state 12
    asg                            shift and go to state 13

state 9

    (3) bc -> LLIZQUIERDA comp .

    $end            reduce using rule 3 (bc -> LLIZQUIERDA comp .)


state 10

    (4) comp -> if . LLDERECHA

    LLDERECHA       shift and go to state 18


state 11

    (5) comp -> for . LLDERECHA

    LLDERECHA       shift and go to state 19


state 12

    (6) comp -> print . LLDERECHA

    LLDERECHA       shift and go to state 20


state 13

    (7) comp -> asg . LLDERECHA

    LLDERECHA       shift and go to state 21


state 14

    (8) if -> IF . PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA

    PARIZQUIERDO    shift and go to state 22


state 15

    (14) for -> FOR . PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA

    PARIZQUIERDO    shift and go to state 23


state 16

    (22) print -> PRINT . PARIZQUIERDO comprint PARDERECHO compif

    PARIZQUIERDO    shift and go to state 24


state 17

    (27) asg -> VAR . ID IGUAL expresion PYC compif

    ID              shift and go to state 25


state 18

    (4) comp -> if LLDERECHA .

    $end            reduce using rule 4 (comp -> if LLDERECHA .)


state 19

    (5) comp -> for LLDERECHA .

    $end            reduce using rule 5 (comp -> for LLDERECHA .)


state 20

    (6) comp -> print LLDERECHA .

    $end            reduce using rule 6 (comp -> print LLDERECHA .)


state 21

    (7) comp -> asg LLDERECHA .

    $end            reduce using rule 7 (comp -> asg LLDERECHA .)


state 22

    (8) if -> IF PARIZQUIERDO . eif PARDERECHO LLIZQUIERDA compif LLDERECHA
    (9) eif -> . expresion MENOR expresion
    (10) eif -> . expresion MAYOR expresion
    (11) eif -> . expresion MAYORIGUAL expresion
    (12) eif -> . expresion MENORIGUAL expresion
    (13) eif -> . expresion IGUALIGUAL expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    eif                            shift and go to state 26
    expresion                      shift and go to state 27

state 23

    (14) for -> FOR PARIZQUIERDO . efor PARDERECHO LLIZQUIERDA compif LLDERECHA
    (15) efor -> . IT op expresion

    IT              shift and go to state 31

    efor                           shift and go to state 30

state 24

    (22) print -> PRINT PARIZQUIERDO . comprint PARDERECHO compif
    (23) comprint -> . ID
    (24) comprint -> . STRING con

    ID              shift and go to state 33
    STRING          shift and go to state 34

    comprint                       shift and go to state 32

state 25

    (27) asg -> VAR ID . IGUAL expresion PYC compif

    IGUAL           shift and go to state 35


state 26

    (8) if -> IF PARIZQUIERDO eif . PARDERECHO LLIZQUIERDA compif LLDERECHA

    PARDERECHO      shift and go to state 36


state 27

    (9) eif -> expresion . MENOR expresion
    (10) eif -> expresion . MAYOR expresion
    (11) eif -> expresion . MAYORIGUAL expresion
    (12) eif -> expresion . MENORIGUAL expresion
    (13) eif -> expresion . IGUALIGUAL expresion

    MENOR           shift and go to state 37
    MAYOR           shift and go to state 38
    MAYORIGUAL      shift and go to state 39
    MENORIGUAL      shift and go to state 40
    IGUALIGUAL      shift and go to state 41


state 28

    (28) expresion -> NUMBER .

    MENOR           reduce using rule 28 (expresion -> NUMBER .)
    MAYOR           reduce using rule 28 (expresion -> NUMBER .)
    MAYORIGUAL      reduce using rule 28 (expresion -> NUMBER .)
    MENORIGUAL      reduce using rule 28 (expresion -> NUMBER .)
    IGUALIGUAL      reduce using rule 28 (expresion -> NUMBER .)
    PYC             reduce using rule 28 (expresion -> NUMBER .)
    PARDERECHO      reduce using rule 28 (expresion -> NUMBER .)


state 29

    (29) expresion -> ID .

    MENOR           reduce using rule 29 (expresion -> ID .)
    MAYOR           reduce using rule 29 (expresion -> ID .)
    MAYORIGUAL      reduce using rule 29 (expresion -> ID .)
    MENORIGUAL      reduce using rule 29 (expresion -> ID .)
    IGUALIGUAL      reduce using rule 29 (expresion -> ID .)
    PYC             reduce using rule 29 (expresion -> ID .)
    PARDERECHO      reduce using rule 29 (expresion -> ID .)


state 30

    (14) for -> FOR PARIZQUIERDO efor . PARDERECHO LLIZQUIERDA compif LLDERECHA

    PARDERECHO      shift and go to state 42


state 31

    (15) efor -> IT . op expresion
    (16) op -> . MENOR

    MENOR           shift and go to state 44

    op                             shift and go to state 43

state 32

    (22) print -> PRINT PARIZQUIERDO comprint . PARDERECHO compif

    PARDERECHO      shift and go to state 45


state 33

    (23) comprint -> ID .

    PARDERECHO      reduce using rule 23 (comprint -> ID .)


state 34

    (24) comprint -> STRING . con
    (25) con -> . SUMA expresion
    (26) con -> . empty
    (30) empty -> .

    SUMA            shift and go to state 47
    PARDERECHO      reduce using rule 30 (empty -> .)

    con                            shift and go to state 46
    empty                          shift and go to state 48

state 35

    (27) asg -> VAR ID IGUAL . expresion PYC compif
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 49

state 36

    (8) if -> IF PARIZQUIERDO eif PARDERECHO . LLIZQUIERDA compif LLDERECHA

    LLIZQUIERDA     shift and go to state 50


state 37

    (9) eif -> expresion MENOR . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 51

state 38

    (10) eif -> expresion MAYOR . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 52

state 39

    (11) eif -> expresion MAYORIGUAL . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 53

state 40

    (12) eif -> expresion MENORIGUAL . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 54

state 41

    (13) eif -> expresion IGUALIGUAL . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 55

state 42

    (14) for -> FOR PARIZQUIERDO efor PARDERECHO . LLIZQUIERDA compif LLDERECHA

    LLIZQUIERDA     shift and go to state 56


state 43

    (15) efor -> IT op . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 57

state 44

    (16) op -> MENOR .

    NUMBER          reduce using rule 16 (op -> MENOR .)
    ID              reduce using rule 16 (op -> MENOR .)


state 45

    (22) print -> PRINT PARIZQUIERDO comprint PARDERECHO . compif
    (17) compif -> . if
    (18) compif -> . for
    (19) compif -> . print
    (20) compif -> . asg
    (21) compif -> . empty
    (8) if -> . IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA
    (14) for -> . FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA
    (22) print -> . PRINT PARIZQUIERDO comprint PARDERECHO compif
    (27) asg -> . VAR ID IGUAL expresion PYC compif
    (30) empty -> .

    IF              shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    LLDERECHA       reduce using rule 30 (empty -> .)

    compif                         shift and go to state 58
    if                             shift and go to state 59
    for                            shift and go to state 60
    print                          shift and go to state 61
    asg                            shift and go to state 62
    empty                          shift and go to state 63

state 46

    (24) comprint -> STRING con .

    PARDERECHO      reduce using rule 24 (comprint -> STRING con .)


state 47

    (25) con -> SUMA . expresion
    (28) expresion -> . NUMBER
    (29) expresion -> . ID

    NUMBER          shift and go to state 28
    ID              shift and go to state 29

    expresion                      shift and go to state 64

state 48

    (26) con -> empty .

    PARDERECHO      reduce using rule 26 (con -> empty .)


state 49

    (27) asg -> VAR ID IGUAL expresion . PYC compif

    PYC             shift and go to state 65


state 50

    (8) if -> IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA . compif LLDERECHA
    (17) compif -> . if
    (18) compif -> . for
    (19) compif -> . print
    (20) compif -> . asg
    (21) compif -> . empty
    (8) if -> . IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA
    (14) for -> . FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA
    (22) print -> . PRINT PARIZQUIERDO comprint PARDERECHO compif
    (27) asg -> . VAR ID IGUAL expresion PYC compif
    (30) empty -> .

    IF              shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    LLDERECHA       reduce using rule 30 (empty -> .)

    compif                         shift and go to state 66
    if                             shift and go to state 59
    for                            shift and go to state 60
    print                          shift and go to state 61
    asg                            shift and go to state 62
    empty                          shift and go to state 63

state 51

    (9) eif -> expresion MENOR expresion .

    PARDERECHO      reduce using rule 9 (eif -> expresion MENOR expresion .)


state 52

    (10) eif -> expresion MAYOR expresion .

    PARDERECHO      reduce using rule 10 (eif -> expresion MAYOR expresion .)


state 53

    (11) eif -> expresion MAYORIGUAL expresion .

    PARDERECHO      reduce using rule 11 (eif -> expresion MAYORIGUAL expresion .)


state 54

    (12) eif -> expresion MENORIGUAL expresion .

    PARDERECHO      reduce using rule 12 (eif -> expresion MENORIGUAL expresion .)


state 55

    (13) eif -> expresion IGUALIGUAL expresion .

    PARDERECHO      reduce using rule 13 (eif -> expresion IGUALIGUAL expresion .)


state 56

    (14) for -> FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA . compif LLDERECHA
    (17) compif -> . if
    (18) compif -> . for
    (19) compif -> . print
    (20) compif -> . asg
    (21) compif -> . empty
    (8) if -> . IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA
    (14) for -> . FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA
    (22) print -> . PRINT PARIZQUIERDO comprint PARDERECHO compif
    (27) asg -> . VAR ID IGUAL expresion PYC compif
    (30) empty -> .

    IF              shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    LLDERECHA       reduce using rule 30 (empty -> .)

    compif                         shift and go to state 67
    if                             shift and go to state 59
    for                            shift and go to state 60
    print                          shift and go to state 61
    asg                            shift and go to state 62
    empty                          shift and go to state 63

state 57

    (15) efor -> IT op expresion .

    PARDERECHO      reduce using rule 15 (efor -> IT op expresion .)


state 58

    (22) print -> PRINT PARIZQUIERDO comprint PARDERECHO compif .

    LLDERECHA       reduce using rule 22 (print -> PRINT PARIZQUIERDO comprint PARDERECHO compif .)


state 59

    (17) compif -> if .

    LLDERECHA       reduce using rule 17 (compif -> if .)


state 60

    (18) compif -> for .

    LLDERECHA       reduce using rule 18 (compif -> for .)


state 61

    (19) compif -> print .

    LLDERECHA       reduce using rule 19 (compif -> print .)


state 62

    (20) compif -> asg .

    LLDERECHA       reduce using rule 20 (compif -> asg .)


state 63

    (21) compif -> empty .

    LLDERECHA       reduce using rule 21 (compif -> empty .)


state 64

    (25) con -> SUMA expresion .

    PARDERECHO      reduce using rule 25 (con -> SUMA expresion .)


state 65

    (27) asg -> VAR ID IGUAL expresion PYC . compif
    (17) compif -> . if
    (18) compif -> . for
    (19) compif -> . print
    (20) compif -> . asg
    (21) compif -> . empty
    (8) if -> . IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA
    (14) for -> . FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA
    (22) print -> . PRINT PARIZQUIERDO comprint PARDERECHO compif
    (27) asg -> . VAR ID IGUAL expresion PYC compif
    (30) empty -> .

    IF              shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    LLDERECHA       reduce using rule 30 (empty -> .)

    compif                         shift and go to state 68
    if                             shift and go to state 59
    for                            shift and go to state 60
    print                          shift and go to state 61
    asg                            shift and go to state 62
    empty                          shift and go to state 63

state 66

    (8) if -> IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif . LLDERECHA

    LLDERECHA       shift and go to state 69


state 67

    (14) for -> FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif . LLDERECHA

    LLDERECHA       shift and go to state 70


state 68

    (27) asg -> VAR ID IGUAL expresion PYC compif .

    LLDERECHA       reduce using rule 27 (asg -> VAR ID IGUAL expresion PYC compif .)


state 69

    (8) if -> IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA .

    LLDERECHA       reduce using rule 8 (if -> IF PARIZQUIERDO eif PARDERECHO LLIZQUIERDA compif LLDERECHA .)


state 70

    (14) for -> FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA .

    LLDERECHA       reduce using rule 14 (for -> FOR PARIZQUIERDO efor PARDERECHO LLIZQUIERDA compif LLDERECHA .)

